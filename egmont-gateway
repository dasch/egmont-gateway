#!/usr/bin/env python

import sys
import os
import gtk
import gtk.glade
import pynotify
import gnomekeyring as gkeyring

import egmont.gateway as gateway

class EgmontGateway:

    def __init__(self):
        pynotify.init("Egmont Gateway")

        self.construct()

        self.host = "bifrost.egmont-kol.dk"
        self.port = 22
        self.username = ""
        self.password = ""

        self.keyring = gkeyring.get_default_keyring_sync()

        self.get_credentials()

    def get_credentials(self):
        try:
            attrs = {"server": self.host, "protocol": "ssh"}
            items = gkeyring.find_items_sync(gkeyring.ITEM_NETWORK_PASSWORD, attrs)
            if len(items) is 0:
                return

            item = items[0]
            self.username_entry.set_text(item.attributes["user"])
            self.password_entry.set_text(item.secret)
        except gkeyring.DeniedError:
            pass
        except gkeyring.NoMatchError:
            pass

    def connect(self, *args):
        attrs = {"user": self.username, "server": self.host, "protocol": "ssh"}
        gkeyring.item_create_sync(self.keyring,
                gkeyring.ITEM_NETWORK_PASSWORD,
                "egmont-gateway", attrs, self.password, True)

        try:
            gateway.connect(self.host, self.port, self.username, self.password)
            n = pynotify.Notification("Egmont Connect",
                                      "You are now connected to the Egmont network.")
            n.show()
            gtk.main_quit()
        except gateway.AuthenticationException:
            dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_CLOSE)
            dialog.set_markup("<b>Failed to authenticate</b>")
            dialog.format_secondary_markup("Please specify a correct username and password.")
            dialog.connect("response", lambda *a: dialog.destroy())
            dialog.run()
        except gateway.NetworkError:
            dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_CLOSE)
            dialog.set_markup("<b>Could not connect to network</b>")
            dialog.format_secondary_markup("Please make sure you have a network connection.")
            dialog.connect("response", lambda *a: dialog.destroy())
            dialog.run()
        except gateway.AccountClosedException:
            dialog = gtk.MessageDialog(type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_CLOSE)
            dialog.set_markup("<b>Your account has been closed</b>")
            dialog.format_secondary_markup("You cannot connect to the network until your quota usage drops.")
            dialog.connect("response", lambda *a: dialog.destroy())
            dialog.run()

    def construct(self):
        dic = {'on_gateway_window_destroy': gtk.main_quit,
               'on_cancel_button_clicked': gtk.main_quit,
               'on_connect_button_clicked': self.connect,
               'on_username_entry_changed': self.username_changed_cb,
               'on_password_entry_changed': self.password_changed_cb}
        window = gtk.glade.XML(sys.prefix + "/share/egmont-gateway/glade/egmont.glade")
        window.signal_autoconnect(dic)

        self.username_entry = window.get_widget("username-entry")
        self.password_entry = window.get_widget("password-entry")
        self.connect_button = window.get_widget("connect-button")

    def username_changed_cb(self, *args):
        self.username = self.username_entry.get_text()
        self.credentials_changed_cb()

    def password_changed_cb(self, *args):
        self.password = self.password_entry.get_text()
        self.credentials_changed_cb()

    def credentials_changed_cb(self):
        self.connect_button.set_sensitive(self.username != "" and self.password != "")
    

if __name__ == "__main__":
    eg = EgmontGateway()
    gtk.main()
    sys.exit(0)
